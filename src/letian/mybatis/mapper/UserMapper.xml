<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC
        "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--这块等于dao接口的实现  namespace必须和接口的类路径一样-->

<mapper namespace="letian.mybatis.dao.UserMapper">

    <!-- 解决属性名和字段名不一致的问题,指明username代表数据库里的name -->
    <resultMap id="userResult" type="letian.mybatis.bean.User">
        <result property="username" column="name" javaType="String" jdbcType="VARCHAR"/>
    </resultMap>

    <!-- findById必须和接口中的方法名一样  返回一个User

    就是刚才的别名  如果不弄别名要连类路径一起写 麻烦

    <select>中也添加了属性resultMap，值为userResult，用来指向上面的<resultMap> -->
    <select id="findById" parameterType="HashMap" resultMap="userResult" resultType="letian.mybatis.bean.User">
        select * from blog_db.user where id=#{id}
    </select>

    <select id="findByPassword" resultMap="userResult" parameterType="HashMap" resultType="letian.mybatis.bean.User">
        select * from blog_db.user where password=#{password}
    </select>

    <select id="findByNameAndPassword" resultMap="userResult" parameterType="HashMap" resultType="letian.mybatis.bean.User">
        select id, name, email
        from blog_db.user where name=#{name} and password=#{password}
    </select>


</mapper>
<!--<Mapper>的namespace是letian.mybatis.dao.UserMapper接口。
唯一的一个<select>的id是findById，
也是在letian.mybatis.dao.UserMapper接口定义的一个方法。
<select>的值是一个select语句，其中#{id}对应方法findById的参数int id，
执行select查询后，返回的类型是letian.mybatis.bean.User。-->